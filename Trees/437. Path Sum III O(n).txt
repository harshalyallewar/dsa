/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    public int pathSum(TreeNode root, int targetSum) {
        if(root==null){
            return count;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        Helper(root, 0, targetSum, map);
        return count;
    }
    
    public void Helper(TreeNode root, int sum, int targetSum, HashMap<Integer, Integer> map){
        if(root==null){
            return;
        }
        
        sum += root.val;
        int cum = sum-targetSum;
        
        if(map.containsKey(cum)){
            count += map.get(cum);
        }
        map.put(sum, map.getOrDefault(sum, 0)+1);
        System.out.println("key: "+sum+" value:  "+map.get(sum));
        Helper(root.left, sum, targetSum, map);
        Helper(root.right, sum, targetSum, map);
        map.put(sum, map.get(sum)-1);
        System.out.println("key: "+sum+" value:  "+map.get(sum));
}
}
