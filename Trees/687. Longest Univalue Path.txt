/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// class pair {
//     int nval;
//     int count;
// }

 

class Solution {
    int ans = 0;
    
    public int longestUnivaluePath(TreeNode root) {
        if(root==null){
            return 0;
        }     
        int a = longestUnivaluePathHelper(root);       
        return ans-1;
    }
    
    public int longestUnivaluePathHelper(TreeNode root) {
        if(root==null){
            return 0;
        }
                
        int leftc = longestUnivaluePathHelper(root.left);
        int rightc = longestUnivaluePathHelper(root.right);
        
        int left = (root.left==null)?Integer.MAX_VALUE:root.left.val;
        int right = (root.right==null)?Integer.MAX_VALUE:root.right.val;
                
        if(root.val==left && root.val==right){
            int count = leftc + rightc + 1;
            ans = Math.max(ans, count);
            return Math.max(leftc, rightc) + 1;
            
        } else if(root.val==left){
             int count = leftc + 1;
            ans = Math.max(count, Math.max(rightc, ans));
            return count;
            
        } else if(root.val==right){      
            int count = rightc + 1;
            ans = Math.max(count, Math.max(leftc, ans));
            return count;
            
        } else {
            int count = 1;
            ans = Math.max(1, ans);
            return count;
        }
    }
}
