class MyQueue {
    Stack<Integer> queue;
    Stack<Integer> stack; 
    boolean stackChange;
    
    public MyQueue() {
        this.queue = new Stack<>();
        this.stack = new Stack<>();
        this.stackChange = false;
    }

    public void push(int x) { 
        if(!this.queue.isEmpty()){
            this.stack = this.fixStack();
        }
        this.stack.push(x);
        this.stackChange = true;
    }
    
    public int pop() {
        if(stackChange){
            return this.makeQueue(true);
        } else {
            return queue.pop();
        }
    }
    
    public int peek() {
        if(stackChange){
            return this.makeQueue(false);
        } else{
            return queue.peek();
        }
        
    }
    
    public boolean empty() {
        if(this.stack.isEmpty() && this.queue.isEmpty()){
            return true;
        }
        return false;
    }
    

    public int makeQueue(boolean pop){
        this.stackChange = false;
        while(!this.stack.isEmpty()){
            this.queue.push(this.stack.pop());
            }
        
        int holder = this.queue.peek();
            if(pop){
                queue.pop();
            }
        
        return holder;
        
    }
    

    public Stack fixStack(){
        while(!this.queue.isEmpty()){
            this.stack.push(this.queue.pop());
        }
        return this.stack;
    }
}
