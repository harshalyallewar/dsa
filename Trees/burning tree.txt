import java.util.*;

public class Main {
  public static Scanner scn = new Scanner(System.in);

  public static class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    TreeNode(int val) {
      this.val = val;
    }
  }
  
  static int max = 0;

  public static int burningTree(TreeNode root, int fireNode) {
    if(root==null){
        return 0;
    }
    
    List<TreeNode> paths = getNodeToRootPath(root, fireNode);
    for(int i=0;i<paths.size();i++){
        burner(paths.get(i),i,(i==0)?null:paths.get(i-1));
    }
    
    return max;
  }
  
  public static void burner(TreeNode root, int secs, TreeNode block){
      if(root==null || root==block){
          return;
      }
      
      if(secs>max){
          max = secs;
      }
      
      burner(root.left, secs+1, block);
      burner(root.right, secs+1, block);
  }
  
  public static List<TreeNode> getNodeToRootPath(TreeNode root, int data){
		        if(root==null){
		            return new ArrayList<>();
		        }
		        
		        if(root.val==data){
		            List<TreeNode> ans = new ArrayList<>();
		            ans.add(root);
		            return ans;
		        }
		        
		        
		        List<TreeNode> left = getNodeToRootPath(root.left, data);
		        if(left.size()>0){
		            left.add(root);
		            return left;
		        }
		        
		        List<TreeNode> right = getNodeToRootPath(root.right, data);
		        if(right.size()>0){
		            right.add(root);
		            return right;
		        }
		        
		        return left;
		        
		    }

  // input_section=================================================

  public static TreeNode createTree(int[] arr, int[] IDX) {
    if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
      IDX[0]++;
      return null;
    }
    TreeNode Treenode = new TreeNode(arr[IDX[0]++]);
    Treenode.left = createTree(arr, IDX);
    Treenode.right = createTree(arr, IDX);

    return Treenode;
  }

  public static void solve() {
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++)
      arr[i] = scn.nextInt();

    int[] IDX = new int[1];
    TreeNode root = createTree(arr, IDX);
    int fireNode = scn.nextInt();

    int ans = burningTree(root, fireNode);
    System.out.println(ans);

  }

  public static void main(String[] args) {
    solve();
  }
}
