/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class pair{
    TreeNode node;
    int idx;
    pair(TreeNode node, int idx){
        this.node = node;
        this.idx = idx;
    }
}

class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        return widthOfBinaryTreeHelper(root);
    }
    
    public int widthOfBinaryTreeHelper(TreeNode root) {
        if(root==null){
            return 0;
        }
        
        LinkedList<pair> que = new LinkedList<>();
        que.addLast(new pair(root, 1));
        int maxWidth = 0;
        
        while(que.size()>0){
            maxWidth = Math.max(maxWidth, que.getLast().idx-que.getFirst().idx+1);
            
            int size = que.size();
            while(size-->0){
             pair pp = que.removeFirst();
             TreeNode node = pp.node; 
                
                if(node.left!=null){
                    que.addLast(new pair(node.left, (pp.idx*2)-1));
                }
                
                if(node.right!=null){
                    que.addLast(new pair(node.right, pp.idx*2));
                }
            }        
        }
        return maxWidth;
    }
}
