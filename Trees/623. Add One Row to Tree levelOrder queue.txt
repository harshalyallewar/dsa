/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        if(root==null) return new TreeNode(val);
     
        if(depth==1){
            TreeNode newroot = new TreeNode(val);
            newroot.left = root;
            return newroot;
        }
        
        LinkedList<TreeNode> que = new LinkedList<>();
        que.addLast(root);
        while(depth-->2 && que.size()>0){
            int size = que.size();
            
            while(size-->0){
                TreeNode pop = que.removeFirst();
                
                if(pop.left!=null) que.addLast(pop.left);
                if(pop.right!=null) que.addLast(pop.right);
            }
        }
        
        if(depth == 1){
            while(que.size()>0){
            TreeNode node = que.removeFirst();
                
            TreeNode newleft = new TreeNode(val);
            TreeNode newright = new TreeNode(val);
            
            newleft.left = node.left;
            newright.right = node.right;
            node.left = newleft;
            node.right = newright;
            }
        }
            
        return root;
    }
    
}
